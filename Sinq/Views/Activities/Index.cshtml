@model IEnumerable<Sinq.Models.Activity>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>


<div class="container">

    @*Folders*@
   
    <div class='col-lg-3'>Folders:
        <ul data-bind="foreach: AllFolders">
            <li data-bind="singleOrDoubleClick: {click: $root.fnShowActivitiesFromFolder.bind(undefined,$data) } ">
                <span data-bind="text: Name"> </span>
                @*butoon delete- visible only if doubleclick*@
                <button data-bind="click: $parent.fnDeleteFolder.bind(undefined,$data)">Delete</button>

            </li>
        </ul>
    @*Add a new folder*@
    <div class='col-lg-12'>
        <div class='col-lg-3'>Name:</div>
        <div class='col-lg-7'>
            <input type='text' class="form-control" data-bind="value:FName, attr: { placeholder: placeholderText}" />
        </div>
        <div class='col-lg-2'>
            <input type="button" value="Add" id="btnAddFolder" data-bind="click: $root.fnAddNewFolder.bind(undefined,$data)" />
        </div>
    </div>
    </div>
                

    @*Activities*@
    <div class='col-lg-9' data-bind="with: ShowFolderActivities">
        Folders' activities:
        <div calss='col-lg-10'>
            @*Adding a new activity*@
            <div class='col-lg-8' data-bind="with: NewActivity">
                <div class='col-lg-3'>Nume:</div>

                <div class='col-lg-8 noPadding'>
                    <input type='text' class="form-control" data-bind="value:Name, attr: { placeholder: placeholderText}" />
                </div>

                <div class='col-lg-1 noPadding'>

                    <div class="form-group">

                        <div class='input-group date' id='datetimepicker'>
                            <input type='hidden' class="form-control" id="dueDate" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </div>
                </div>

                @*The activities list*@
                <div class='col-lg-12'>
                    <ul data-bind="foreach: AllActivities">
                        <li data-bind="singleOrDoubleClick: { dblclick: $root.fnShowActivity.bind(undefined,$data) } ">
                            <label><input type="checkbox" data-bind="checked: $data.Completed, event: { change: $parent.fnCompleteActivity.bind(undefined,$data)} "></label>
                            <span data-bind="text: Name"> </span>
                            <button data-bind="click: $parent.fnChangeState.bind(undefined,$data)">Start</button>
                        </li>
                    </ul>
                </div>

            </div>

            <div class='col-lg-2'>
                <input type="button" value="Add" id="btnAddActivity" data-bind="click: $root.fnAddNewActivity" />
            </div>





        </div>

        @*Show details for a selected activity*@

        <div class='col-lg-2' data-bind="with: ShownActivity">
            Activity details:
            @*<div class='col-lg-6' data-bind=" with shownactivity">*@
            <div class="row">
                <div class='col-lg-6'>Activity:</div>
                <div class='col-lg-6 '>
                    <input type='text' class="form-control" data-bind="value:Name, attr: { placeholder: placeholderText}" />
                </div>
            </div>

            <div class="row">
                <div class='col-lg-6'>DueDate:</div>
                <div class='col-lg-6 '>
                    <input type='text' class="form-control" data-bind="value:DueDate, attr: { placeholder: DueDate}" />
                </div>
            </div>

            @*<div class ='col-lg-4'>Assigned time(in minutes):</div>
                <div calss='col-lg-8 noPadding'>
                    <input type='number' class="form-inline" data-bind="value:assignedTime, attr:{placeholder: assignedTime}">
                </div>*@
            <div class="row">
                <div class='col-lg-9'>ElaspedTime:</div>
                <div calss='col-lg-3 '>
                    <input type='text' class="form-inline" data-bind="value:ElaspedTime, attr:{placeholder: ElaspedTime}">
                </div>
            </div>
            <br>

            <div>
                <button data-bind="click: $parent.fnRemoveActivity.bind(undefined,id)">Remove</button>
            </div>

        </div>
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/knockout")
    <script type="text/javascript">

        function Folder(Folder) {
            var self = this;
            self.idF = Folder.Id;
            self.FName = ko.observable(Folder.Name || '');
        }
        
        function Activity(Activity) {
            var self = this;
            self.id = Activity.Id;
            self.Completed = ko.observable(Activity.Completed || '');
            self.CompletedAt = ko.observable(Activity.CompletedAt || '');
            self.Name = ko.observable(Activity.Name || '');
            self.DueDate = ko.observable(Activity.DueDate || undefined);
            self.ActivityTimes = ko.observableArray(Activity.ActivityTimes || []);
            self.placeholderText = Activity.placeholderText || 'Type the name of the activity';
            self.ElaspedTime = ko.observable(Activity.ElaspedTime || '');
            self.ActivityState = ko.computed(function () { return Activity.IsStarted });
        }



        
        function ActivityOverviewVM() {
            var self = this;
            self.NewActivity = ko.observable(new Activity({}));
            self.AllActivities = ko.observableArray();
            self.ShownActivity = ko.observable();
            self.DisplayActivity = ko.observable(false);
            self.AllFolders = ko.observableArray();
            self.ShowActivitiesFromFolder = ko.observable();
            self.ShowFolderActivities = ko.observable();
            self.DisplayFolderActivities = ko.observable(false);
            self.NewFolder = ko.observable(new Folder({}));

            // The function adds a new activity
            self.fnAddNewActivity = function () {
                $.ajax({
                    url: "/api/activities",
                    method: "POST",
                    async: false,
                    data: {
                        Id: -1,
                        Name: self.NewActivity().name(),
                        DueDate: undefined
                    }
                }).done(function (result) {
                    alert(result)
                })
            }


            //The function get the list of all activities
            self.fnGetAllActivities = function () {
                $.getJSON("/api/activities", function (data) {
                    var resultArray = $.map(data.result, function (value) {

                        return new Activity(value);
                    })
                    self.AllActivities(resultArray);
                })
            }
        //    self.fnGetAllActivities();


            //The function removes an activity
            self.fnRemoveActivity = function (id) {
                $.ajax({
                    url: "/api/activities/"+id,
                    method: "Delete",
                    async: false,
                }).done(function (result) {  
              })
            }


            //The function changes the 'Completed' proprety of an action
            self.fnCompleteActivity = function (activity) {
                var url = "/api/activities/" + activity.id() + "/complete";
                $.ajax({
                    url: url,
                    method: "Put",
                    async: false,
                }).done(function (result) {
                    if (sefl.complet(!self.complet())) {
                    }
                })
            }

          
           //The function changes the current state of an action 
           self.fnChangeState= function (activity) {
              /* var url = "/api/activities/" + activity.id + "/start";
               $.ajax({
                   url: url,
                   method:"Put",
                   async: false,
               }).done(function (result) {
                   if (result != true) {
                       ("ActivityState").val("Start");
                       var url = "/api/activities/" + activity.id + "/stop";
                       $.ajax({
                           url: url,
                           method: "Put",
                           async: false,
                       }).done(function (result) { })

                   } else {
                       ("ActivityState").val("Stop");
                   }
               })*/
               if (activity.ActivityState == true) {
                   var url = "/api/activities/" + activity.id + "/start";
                   $.ajax({
                       url: url,
                       method: "Put",
                       async: false,
                   }).done(function (result) { })
               } else {
                   var url = "/api/activities/" + activity.id + "/stop";
                   $.ajax({
                       url: url,
                       method: "Put",
                       async: false,
                   }).done(function (result) { })
               }
           }


            //The function makes visible the details of a selected activity
            self.fnShowActivity = function (activity) {
                self.ShownActivity() = activity;
                self.DisplayActivity(true);
                
            }

            //The function gets the list of all folders
            self.fnGetAllFolders = function () {
                $.getJSON("/api/folders", function (data) {
                    var resultArray = $.map(data.result, function (value) {

                        return new Folder(value);
                    })
                    self.AllFolders(resultArray);
                })
            }
            self.fnGetAllFolders();

            //The function gets the list of all activities from a selected folder
            self.fnShowActivitiesFromFolder = function (folder) {
                self.ShowFolderActivities() = folder;
                self.DisplayFolderActivities(true);
            }

            //The function adds a new folder
            self.fnAddNewFolder = function (folder) {
                $.ajax({
                    url: "/api/folders",
                    method: "POST",
                    async: false,
                    data: {
                        Id: -1,
                        Name: self.NewFolder().FName()
                    }
                }).done(function (result) {
                    alert(result)
                })
            }

            //The function deletes a folder
            self.fnDeleteFolder = function (folder) {
                $.ajax({
                    url: "/api/folders/" + folder.idF,
                    method: "FolderDelete",@*???*@
                    async: false,
                }).done(function (result) {
                })
            }

        }
        ko.applyBindings(new ActivityOverviewVM());

        $('#datetimepicker').datetimepicker();
        $('#Name').attr("placeholder", "Type activity name here");


        //Used for the click envent
        ko.bindingHandlers.singleOrDoubleClick = {
            init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var singleHandler = valueAccessor().click,
                    doubleHandler = valueAccessor().dblclick,
                    delay = valueAccessor().delay || 200,
                    clicks = 0;

                $(element).click(function (event) {
                    clicks++;
                    if (clicks === 1) {
                        setTimeout(function () {
                            if (clicks === 1) {
                                // Call the single click handler - passing viewModel as this 'this' object
                                // you may want to pass 'this' explicitly
                                if (singleHandler !== undefined) {
                                    singleHandler.call(viewModel, bindingContext.$data, event);
                                }
                            } else {
                                // Call the double click handler - passing viewModel as this 'this' object
                                // you may want to pass 'this' explicitly
                                if (doubleHandler !== undefined) {
                                    doubleHandler.call(viewModel, bindingContext.$data, event);
                                }
                            }
                            clicks = 0;
                        }, delay);
                    }
                });
            }
        };
       

        // weird javascript code
        //function test() { return { prop: "asd" }};
        //test['a'] = function () { alert(3) } ;
        //test['a']()
        //test.a();
        //alert(test().prop);

        
    </script>
}